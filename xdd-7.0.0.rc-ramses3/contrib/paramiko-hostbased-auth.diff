diff -urN -rupN paramiko-1.13.0/paramiko/__init__.py paramiko/paramiko/__init__.py
--- paramiko-1.13.0/paramiko/__init__.py	2014-03-14 00:31:25.000000000 -0400
+++ paramiko/paramiko/__init__.py	2014-04-28 13:43:56.000000000 -0400
@@ -23,7 +23,7 @@ if sys.version_info < (2, 6):
 
 
 __author__ = "Jeff Forcier <jeff@bitprophet.org>"
-__version__ = "1.13.0"
+__version__ = "1.13.1"
 __version_info__ = tuple([ int(d) for d in __version__.split(".") ])
 __license__ = "GNU Lesser General Public License (LGPL)"
 
@@ -54,6 +54,7 @@ from paramiko.pkey import PKey
 from paramiko.hostkeys import HostKeys
 from paramiko.config import SSHConfig
 from paramiko.proxy import ProxyCommand
+from paramiko.opensshkey import load_pubkey_from_file
 
 from paramiko.common import AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, AUTH_FAILED, \
     OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, OPEN_FAILED_CONNECT_FAILED, \
diff -urN -rupN paramiko-1.13.0/paramiko/auth_handler.py paramiko/paramiko/auth_handler.py
--- paramiko-1.13.0/paramiko/auth_handler.py	2014-03-14 00:31:25.000000000 -0400
+++ paramiko/paramiko/auth_handler.py	2014-04-28 13:43:56.000000000 -0400
@@ -20,6 +20,8 @@
 `.AuthHandler`
 """
 
+import getpass
+import socket
 import weakref
 from paramiko.common import cMSG_SERVICE_REQUEST, cMSG_DISCONNECT, \
     DISCONNECT_SERVICE_NOT_AVAILABLE, DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE, \
@@ -35,6 +37,7 @@ from paramiko.py3compat import bytestrin
 from paramiko.ssh_exception import SSHException, AuthenticationException, \
     BadAuthenticationType, PartialAuthentication
 from paramiko.server import InteractiveQuery
+from paramiko.keysign import Keysign
 
 
 class AuthHandler (object):
@@ -48,6 +51,7 @@ class AuthHandler (object):
         self.authenticated = False
         self.auth_event = None
         self.auth_method = ''
+        self.hostkey = None
         self.banner = None
         self.password = None
         self.private_key = None
@@ -112,7 +116,17 @@ class AuthHandler (object):
             self._request_auth()
         finally:
             self.transport.lock.release()
-    
+   
+    def auth_hostbased(self, username, hostkey, event):
+        self.transport.lock.acquire()
+        try:
+            self.auth_event = event
+            self.auth_method = 'hostbased'
+            self.username = username
+            self.hostkey = hostkey
+            self._request_auth()
+        finally:
+            self.transport.lock.release()
     def abort(self):
         if self.auth_event is not None:
             self.auth_event.set()
@@ -155,6 +169,24 @@ class AuthHandler (object):
         m.add_string(key)
         return m.asbytes()
 
+    def _get_hostbased_session_blob(self, hostkey, service, username):
+        m = Message()
+        m.add_string(self.transport.session_id)
+        m.add_byte(chr(MSG_USERAUTH_REQUEST))
+        m.add_string(username)
+        m.add_string(service)
+        m.add_string('hostbased')
+        m.add_string(hostkey.get_name())
+        m.add_string(str(hostkey))
+        m.add_string(self._get_local_name() + '.')
+        m.add_string(getpass.getuser())
+        return str(m)
+
+    def _get_local_name(self):
+        addr = self.transport.sock.getsockname()
+        names = socket.getnameinfo(addr, socket.NI_NAMEREQD)
+        return names[0]
+
     def wait_for_response(self, event):
         while True:
             event.wait(0.1)
@@ -211,6 +243,15 @@ class AuthHandler (object):
             elif self.auth_method == 'keyboard-interactive':
                 m.add_string('')
                 m.add_string(self.submethods)
+            elif self.auth_method == 'hostbased':
+                m.add_string(self.hostkey.get_name())
+                m.add_string(str(self.hostkey))
+                m.add_string(self._get_local_name() + '.')
+                m.add_string(getpass.getuser())
+                # this blob must be the same as the message (minus the sig)
+                blob = self._get_hostbased_session_blob(self.hostkey, 'ssh-connection', self.username)
+                sig = Keysign().sign(self.transport.sock, blob)
+                m.add_string(sig)
             elif self.auth_method == 'none':
                 pass
             else:
diff -urN -rupN paramiko-1.13.0/paramiko/client.py paramiko/paramiko/client.py
--- paramiko-1.13.0/paramiko/client.py	2014-03-14 00:31:25.000000000 -0400
+++ paramiko/paramiko/client.py	2014-04-28 13:43:56.000000000 -0400
@@ -171,7 +171,7 @@ class SSHClient (object):
 
     def connect(self, hostname, port=SSH_PORT, username=None, password=None, pkey=None,
                 key_filename=None, timeout=None, allow_agent=True, look_for_keys=True,
-                compress=False, sock=None):
+                compress=False, sock=None, hostkey=None):
         """
         Connect to an SSH server and authenticate to it.  The server's host key
         is checked against the system host keys (see `load_system_host_keys`)
@@ -185,6 +185,7 @@ class SSHClient (object):
             - The ``pkey`` or ``key_filename`` passed in (if any)
             - Any key we can find through an SSH agent
             - Any "id_rsa" or "id_dsa" key discoverable in ``~/.ssh/``
+            - Host-based authentication using the public key in C{hostkey}
             - Plain username/password auth, if a password was given
 
         If a private key requires a password to unlock it, and a password is
@@ -210,6 +211,8 @@ class SSHClient (object):
         :param socket sock:
             an open socket or socket-like object (such as a `.Channel`) to use
             for communication to the target host
+        :param L{PKey} hostkey: the optional public key of the host to use for
+            host-based authentication
 
         :raises BadHostKeyException: if the server's host key could not be
             verified
@@ -270,7 +273,7 @@ class SSHClient (object):
             key_filenames = [key_filename]
         else:
             key_filenames = key_filename
-        self._auth(username, password, pkey, key_filenames, allow_agent, look_for_keys)
+        self._auth(username, password, pkey, key_filenames, allow_agent, look_for_keys, hostkey)
 
     def close(self):
         """
@@ -354,13 +357,14 @@ class SSHClient (object):
         """
         return self._transport
 
-    def _auth(self, username, password, pkey, key_filenames, allow_agent, look_for_keys):
+    def _auth(self, username, password, pkey, key_filenames, allow_agent, look_for_keys, hostkey):
         """
         Try, in order:
 
             - The key passed in, if one was passed in.
             - Any key we can find through an SSH agent (if allowed).
             - Any "id_rsa" or "id_dsa" key discoverable in ~/.ssh/ (if allowed).
+            - Host-based authentication using the host key, if given.
             - Plain username/password auth, if a password was given.
 
         (The password might be needed to unlock a private key, or for
@@ -442,6 +446,13 @@ class SSHClient (object):
                 except (SSHException, IOError) as e:
                     saved_exception = e
 
+        if not two_factor and hostkey is not None:
+            try:
+                self._transport.auth_hostbased(username, hostkey)
+                return
+            except SSHException, e:
+                saved_exception = e
+
         if password is not None:
             try:
                 self._transport.auth_password(username, password)
diff -urN -rupN paramiko-1.13.0/paramiko/keysign.py paramiko/paramiko/keysign.py
--- paramiko-1.13.0/paramiko/keysign.py	1969-12-31 19:00:00.000000000 -0500
+++ paramiko/paramiko/keysign.py	2014-04-28 14:02:56.000000000 -0400
@@ -0,0 +1,75 @@
+# Copyright (C) 2014  Nicholas Mills <nlmills@g.clemson.edu>
+#
+# This file is part of paramiko.
+#
+# Paramiko is free software; you can redistribute it and/or modify it under the
+# terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation; either version 2.1 of the License, or (at your option)
+# any later version.
+#
+# Paramiko is distributed in the hope that it will be useful, but WITHOUT ANY
+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+# A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
+#
+# You should have received a copy of the GNU Lesser General Public License
+# along with Paramiko; if not, write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
+
+import os.path
+import socket
+import subprocess
+
+import paramiko
+
+
+class Keysign(object):
+
+    def __init__(self, keysign_path=''):
+        candidate_paths = [keysign_path,
+                           '/usr/libexec/ssh-keysign',
+                           '/usr/lib64/ssh/ssh-keysign',
+                           '/usr/libexec/openssh/ssh-keysign']
+
+        match = None
+        for path in candidate_paths:
+            if os.path.isfile(path) and os.access(path, os.X_OK):
+                match = path
+                break
+
+        if match is None:
+            ae = 'no ssh-keysign program found'
+            raise paramiko.AuthenticationException(ae)
+        self._keysign_path = match
+
+    def sign(self, sock, blob):
+        version = chr(2)
+
+        # Construct the request
+        request = paramiko.Message()
+        request.add_byte(version)
+        request.add_int(sock.fileno())
+        request.add_string(blob)
+        reqm = paramiko.Message()
+        reqm.add_string(str(request))
+
+        # Sign the request and test completion
+        ksproc = subprocess.Popen([self._keysign_path],
+                                  stdin=subprocess.PIPE,
+                                  stdout=subprocess.PIPE,
+                                  stderr=subprocess.PIPE)
+        (so, se) = ksproc.communicate(str(reqm))
+        if 0 != ksproc.returncode:
+            ae = self._keysign_path + ' terminated with an error: ' + se
+            raise paramiko.AuthenticationException(ae)
+
+        # Send the response
+        respm = paramiko.Message(so)
+        response = paramiko.Message(respm.get_string())
+        respver = response.get_byte()
+        if version != respver:
+            ae = 'incompatible versions ' + version + ' != ' + respver
+            raise paramiko.AuthenticationException(ae)
+        else:
+            signature = response.get_string()
+        return signature
diff -urN -rupN paramiko-1.13.0/paramiko/opensshkey.py paramiko/paramiko/opensshkey.py
--- paramiko-1.13.0/paramiko/opensshkey.py	1969-12-31 19:00:00.000000000 -0500
+++ paramiko/paramiko/opensshkey.py	2014-04-28 13:43:56.000000000 -0400
@@ -0,0 +1,61 @@
+# Copyright (C) 2014  Nicholas Mills <nlmills@g.clemson.edu>
+#
+# This file is part of paramiko.
+#
+# Paramiko is free software; you can redistribute it and/or modify it under the
+# terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation; either version 2.1 of the License, or (at your option)
+# any later version.
+#
+# Paramiko is distributed in the hope that it will be useful, but WITHOUT ANY
+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+# A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
+#
+# You should have received a copy of the GNU Lesser General Public License
+# along with Paramiko; if not, write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
+
+import base64
+
+import paramiko
+
+
+_pubkey_types = {
+    'ssh-rsa' : paramiko.RSAKey,
+    'ssh-dss' : paramiko.DSSKey,
+}
+
+def _load_pubkey_from_file(keyfile):
+    line = keyfile.readline()
+
+    # skip over comments or blank lines
+    while line[0] == '#' or line[0] == '\n':
+        line = keyfile.readline()
+
+    # don't load what looks like a private key
+    if line.startswith('-----BEGIN'):
+        return None
+
+    # fields[0] = key type
+    # fields[1] = base64-encoded key blob
+    fields = line.strip().split(' ', 1)
+    if len(fields) != 2:
+        return None
+
+    pkclass = _pubkey_types[fields[0]]
+    pubkey = pkclass(data=base64.decodestring(fields[1]))
+
+    return pubkey
+
+def load_pubkey_from_file(keyfile):
+    try:
+        if type(keyfile) is str:
+            with open(keyfile, 'r') as f:
+                pubkey = _load_pubkey_from_file(f)
+        else:
+            pubkey = _load_pubkey_from_file(keyfile)
+    except:
+        raise paramiko.SSHException('error loading public key from file')
+
+    return pubkey
diff -urN -rupN paramiko-1.13.0/paramiko/transport.py paramiko/paramiko/transport.py
--- paramiko-1.13.0/paramiko/transport.py	2014-03-14 00:31:25.000000000 -0400
+++ paramiko/paramiko/transport.py	2014-04-28 13:43:56.000000000 -0400
@@ -314,8 +314,9 @@ class Transport (threading.Thread):
         Otherwise an SSHException is raised.
 
         After a successful negotiation, you will usually want to authenticate,
-        calling `auth_password <Transport.auth_password>` or
-        `auth_publickey <Transport.auth_publickey>`.
+        calling `auth_password <Transport.auth_password>`,
+        `auth_publickey <Transport.auth_publickey>`, or
+        `auth_hostbased <Transport.auth_hostbased>.
 
         .. note:: `connect` is a simpler method for connecting as a client.
 
@@ -1123,6 +1124,53 @@ class Transport (threading.Thread):
             return []
         return self.auth_handler.wait_for_response(my_event)
 
+    def auth_hostbased(self, username, hostkey, event=None):
+        """
+        Authenticate to the server using a host-based key.  The key is used to
+        sign data from the server, so it must include the private part.
+
+        If an ``event`` is passed in, this method will return immediately, and
+        the event will be triggered once authentication succeeds or fails.  On
+        success, `is_authenticated` will return ``True``.  On failure, you may
+        use `get_exception` to get more detailed error information.
+
+        Since 1.1, if no event is passed, this method will block until the
+        authentication succeeds or fails.  On failure, an exception is raised.
+        Otherwise, the method simply returns.
+
+        If the server requires multi-step authentication (which is very rare),
+        this method will return a list of auth types permissible for the next
+        step.  Otherwise, in the normal case, an empty list is returned.
+
+        :param str username: the username to authenticate as
+        :param .PKey hostkey: the host-based key to authenticate with
+        :param .threading.Event event:
+            an event to trigger when the authentication attempt is complete
+            (whether it was successful or not)
+        :return:
+            `list` of auth types permissible for the next stage of
+            authentication (normally empty)
+
+        :raises BadAuthenticationType: if public-key authentication isn't
+            allowed by the server for this user (and no event was passed in)
+        :raises AuthenticationException: if the authentication failed (and no
+            event was passed in)
+        :raises SSHException: if there was a network error
+        """
+        if (not self.active) or (not self.initial_kex_done):
+            # we should never try to authenticate unless we're on a secure link
+            raise SSHException('No existing session')
+        if event is None:
+            my_event = threading.Event()
+        else:
+            my_event = event
+        self.auth_handler = AuthHandler(self)
+        self.auth_handler.auth_hostbased(username, hostkey, my_event)
+        if event is not None:
+            return []
+        else:
+            return self.auth_handler.wait_for_response(my_event)
+
     def auth_interactive(self, username, handler, submethods=''):
         """
         Authenticate to the server interactively.  A handler is used to answer
