#!/bin/env python

# Import modules
import unittest
import subprocess
from xdd.flow import *

# "constants"
TEST_PORT = 40010

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test checkPreconditions method of Flow
class FlowCheckPreconditionsTestCase(unittest.TestCase):
    """Test checkPreconditions method of Flow"""
    def test_valid_xdd(self):
        """Test sink side of branch"""
        flow = Flow(True, 32768,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/dev/null'
        flow.dataSize = 1
        self.assertEqual(True, flow.checkPreconditions())

    def test_invalid_xdd(self):
        """Test sink side of branch"""
        flow = Flow(True, 32768,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'sbin')
        flow.target = '/dev/null'
        self.assertEqual(False, flow.checkPreconditions())

    def test_sink(self):
        """Test sink side of branch"""
        flow = Flow(True, 32768,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/dev/null'
        flow.dataSize = 1
        self.assertEqual(True, flow.checkPreconditions())

    def test_source(self):
        """Test source side of branch"""
        flow = Flow(False, 8192,
                    0, 1, [("localhost", TEST_PORT, 8)],
                    False, True, True, True, 'bin')
        flow.target = '/dev/zero'
        flow.dataSize = 1
        self.assertEqual(True, flow.checkPreconditions())

class FlowCheckSinkPreconditionsTestCase(unittest.TestCase):
    """Test checkSinkPreconditions method of Flow"""

    def test_character_device(self):
        """Test a valid character device"""
        flow = Flow(True, 4096,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/dev/null'
        self.assertEqual(True, flow.checkSinkPreconditions())

    def test_character_device_permission(self):
        """Test a character device that is read-only"""
        flow = Flow(True, 4096,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/dev/zero'
        self.assertEqual(True, flow.checkSinkPreconditions())

    def test_character_device_dio(self):
        """Test an invalid character device flag (DIO is not allowed)"""
        flow = Flow(True, 8192,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    True, False, False, False, 'bin')
        flow.target = '/dev/null'
        self.assertEqual(False, flow.checkSinkPreconditions())

    def test_block_device_non_root(self):
        """Test a block device device (non-root is not allowed)"""
        flow = Flow(True, 16384,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/dev/Disk0'
        self.assertEqual(False, flow.checkSinkPreconditions())

    def test_regular_file(self):
        """Test a valid existing file"""
        flow = Flow(True, 1024,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = 'Makefile'
        self.assertEqual(True, flow.checkSinkPreconditions())

    def test_regular_file_parent_dir_exists(self):
        """Test a valid file with a valid parent directory"""
        flow = Flow(True, 1024,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/tmp/non_existant_file'
        self.assertEqual(True, flow.checkSinkPreconditions())

class FlowCheckSourcePreconditionsTestCase(unittest.TestCase):
    """Test checkSourcePreconditions method of Flow"""

    def test_character_device(self):
        flow = Flow(False, 1024,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/dev/zero'
        self.assertEqual(True, flow.checkSourcePreconditions())

    def test_character_device_dio(self):
        flow = Flow(False, 1024,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    True, False, False, False, 'bin')
        flow.target = '/dev/zero'
        self.assertEqual(False, flow.checkSourcePreconditions())

    def test_block_device_non_root(self):
        flow = Flow(False, 1024,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = '/dev/Disk0'
        self.assertEqual(False, flow.checkSourcePreconditions())

    def test_regular_file_exists(self):
        flow = Flow(False, 1024,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = 'Makefile'
        self.assertEqual(True, flow.checkSourcePreconditions())

    def test_non_file(self):
        flow = Flow(False, 1024,
                    0, 1, [("localhost", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = "/not/defined/path/to/file"
        self.assertEqual(False, flow.checkSourcePreconditions())

class FlowCreateCommandArgsTestCase(unittest.TestCase):
    """Test createCommandArgs method of Flow"""

    def test_single_sink(self):
        """Test a valid single sink"""
        expected = ["./xdd", "-target", "foo1", "-op", "write"]
        expected.extend(["-e2e", "isdest"])
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "host:%d,1" % TEST_PORT])
        expected.extend(["-noordering"])
        expected.extend(["-preallocate", "1024"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-stdout", "logfile"])
        expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(True, 1024,
                    0, 1, [("host", TEST_PORT, 1)],
                    False, False, False, False, '.')
        flow.target = 'foo1'
        flow.dataSize = 1024
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_single_source(self):
        """Test a valid single source"""
        expected = ["dir/xdd", "-target", "foo2", "-op", "read", "-e2e", "issource"]
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "localhost:%d,1" % TEST_PORT])
        expected.extend(["-looseordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(False, 1024,
                        0, 1, [("localhost", TEST_PORT, 1)],
                        False, False, False, False, 'dir')
        flow.target = 'foo2'
        flow.dataSize = 1024        
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_multiple_sink(self):
        """Test a valid multiple sink"""
        expected = ["bin/xdd", "-target", "foo3", "-op", "write", "-e2e", "isdest"]
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if1:%d,1" % TEST_PORT])
        expected.extend(["-e2e", "dest", "if2:%d,1" % TEST_PORT])
        expected.extend(["-noordering"])
        expected.extend(["-preallocate", "1024"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-stdout", "logfile"])
        expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(True, 1024,
                    0, 1, [("if1", TEST_PORT, 1), ("if2", TEST_PORT, 1)],
                    False, False, False, False, 'bin')
        flow.target = 'foo3'
        flow.dataSize = 1024
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_multiple_source(self):
        """Test a valid multiple source"""
        expected = ["./xdd", "-target", "foo4", "-op", "read", "-e2e", "issource"]
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if1:%d,1" % TEST_PORT])
        expected.extend(["-e2e", "dest", "if2:%d,1" % TEST_PORT])
        expected.extend(["-looseordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(False, 1024, 
                    0, 1, [("if1", TEST_PORT, 1), ("if2", TEST_PORT, 1)],
                    False, False, False, False, '.')
        flow.target = 'foo4'
        flow.dataSize = 1024
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_source_serial_ordering(self):
        """Test a source with serial ordering"""
        expected = ["./xdd", "-target", "foo4", "-op", "read", "-e2e", "issource"]
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if1:%d,1" % TEST_PORT])
        expected.extend(["-serialordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(False, 1024,
                    0, 1, [("if1", TEST_PORT, 1)],
                    dioFlag=False, serialFlag=True, verboseFlag=False, 
                    timestampFlag=False, xddPath='.')
        flow.target = 'foo4'
        flow.dataSize = 1024
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_sink_serial_ordering(self):
        """Test a sink with serial ordering"""
        expected = ["./xdd", "-target", "foo4", "-op", "write", "-e2e", "isdest"]
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if1:%d,1" % TEST_PORT])
        expected.extend(["-serialordering"])
        expected.extend(["-preallocate", "1024"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(True, 1024,
                    0, 1, [("if1", TEST_PORT, 1)],
                    dioFlag=False, serialFlag=True, verboseFlag=False, 
                    timestampFlag=False, xddPath='.')
        flow.target = 'foo4'
        flow.dataSize = 1024
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:  
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_sink_dio(self):
        """Test a sink with serial ordering"""
        expected = ["./xdd", "-target", "foo4", "-op", "write", "-e2e", "isdest"]
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if1:%d,1" % TEST_PORT])
        expected.extend(["-dio"])
        expected.extend(["-noordering"])
        expected.extend(["-preallocate", "1024"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(True, 1024,
                    0, 1, [("if1", TEST_PORT, 1)],
                    dioFlag=True, serialFlag=False, verboseFlag=False,
                    timestampFlag=False, xddPath='.')
        flow.target = 'foo4'
        flow.dataSize = 1024
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))



    def test_default_xdd_path(self):
        """Test a valid multiple source"""
        # Get the default path of xdd
        p = subprocess.Popen(['which', 'xdd'], stdout=subprocess.PIPE)
        (xddPath, _) = p.communicate()
        xddPath = xddPath.rstrip()

        expected = [xddPath, "-target", "foo4", "-op", "read"]
        expected.extend(["-e2e", "issource"])
        expected.extend(["-reqsize", "1024", "-blocksize", "1"])
        expected.extend(["-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if2:%d,1" % TEST_PORT])
        expected.extend(["-looseordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-hb", "1", "-hb", "bytes", "-hb", "lf"])

        flow = Flow(False, 1024, 
                    0, 1, [("if2", TEST_PORT, 1)],
                    False, False, False, False)
        flow.target = 'foo4'
        flow.dataSize = 1024
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

class FlowStartTestCase(unittest.TestCase):
    """Test start method of Flow"""

    def test_zero_to_null(self):
        """Start a zero to null flow"""
        sink = Flow(True, 1024, 
                    0, 1, [("localhost", TEST_PORT, 1), ("localhost", TEST_PORT+10, 1)],
                    False, False, False, False, 'bin')
        sinkStatus = sink.start('/dev/null', 4096)

        source = Flow(False, 1024, 
                      0, 1, [("localhost", TEST_PORT, 1), ("localhost", TEST_PORT+10, 1)],
                      False, False, False, False, 'bin')
        sourceStatus = source.start('/dev/zero', 4096)

        import time
        while sinkStatus.completion() is None:
            time.sleep(3)
        self.assertEqual(sinkStatus.completion(), 0)
        self.assertEqual(sourceStatus.completion(), 0)

class FlowHasPreallocateTestCase(unittest.TestCase):
    """Test hasPreallocate method of Flow"""

    def test_platform_has_it(self):
        f = Flow(True, 1024,
                 0, 1, [("localhost", TEST_PORT, 1), ("localhost", TEST_PORT+10, 1)],
                 False, False, False, False, 'bin')
        if sys.platform.startswith('linux'):
            self.assertEqual(True, f.hasPreallocate())
        elif sys.platform.startswith('darwin'):
            self.assertEqual(False, f.hasPreallocate())
        else:
            self.assertEqual(True, False)

if __name__ == '__main__':
    unittest.main()
