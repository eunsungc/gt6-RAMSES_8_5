#!/bin/env python

# Import modules
import logging
import unittest
from xdd.transfermanager import TransferManager 

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test createEndpoints method of TransferManager
class TransferManagerCreateEndpointsTestCase(unittest.TestCase):
    """Test createFlows method of TransferManager"""

    def tearDown(self):
        import time
        #time.sleep(3)

    def test_empty(self):
        """Test calling createFlows without adequate data"""
        tm = TransferManager()
        try:
            rc = tm.createFlows()
            self.assertEqual(0, 1)
        except:
            self.assertEqual(1, 1)

    def test_local_mem_to_mem(self):
        """Test a local mem to local mem transfer"""
        tm = TransferManager()
        tm.setXddPath('bin')
        tm.setRequestSize(1024*1024)
        tm.setTransferSize(1024*1024*1024*20)
        tm.setSourceTarget("/dev/zero")
        tm.setSinkTarget("/dev/null")
        tm.addSource(None, "localhost", "localhost", 1, ['localhost'])
        tm.addSink(None, "localhost", "localhost", 1)
        rc = tm.createEndpoints()
        self.assertEqual(0, rc)
        rc = tm.startTransfer("/dev/zero", "/dev/null")
        self.assertEqual(0, rc)
        rc = tm.monitorTransfer(1)
        self.assertEqual(0, rc)
        rc = tm.cleanupEndpoints()
        self.assertEqual(0, rc)

    def test_local_mem_to_remote_mem(self):
        """Test a local mem to remote mem transfer"""
        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        #logging.basicConfig()
        tm = TransferManager()
        tm.setSourceXddPath('')
        tm.setRequestSize(1024*1024)
        tm.setTransferSize(1024*1024*1024*20)
        tm.setSourceTarget("/dev/zero")
        tm.setSinkTarget("/dev/null")
        tm.addSource(None, "localhost", "localhost", 2, [host])
        tm.addSink(None, host, host, 2)
        rc = tm.createEndpoints()
        self.assertEqual(0, rc)
        rc = tm.startTransfer("/dev/zero", "/dev/null")
        self.assertEqual(0, rc)
        rc = tm.monitorTransfer(1)
        self.assertEqual(0, rc)
        rc = tm.cleanupEndpoints()
        self.assertEqual(0, rc)

    def test_remote_mem_to_local_mem(self):
        """Test a local mem to remote mem transfer"""
        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        tm = TransferManager()
        tm.setSinkXddPath('')
        tm.setRequestSize(1024*1024)
        tm.setTransferSize(1024*1024*1024*20)
        tm.setSourceTarget("/dev/zero")
        tm.setSinkTarget("/dev/null")
        tm.addSource(None, host, host, 3, [host])
        tm.addSink(None, "localhost", "localhost", 3, [host])
        rc = tm.createEndpoints()
        self.assertEqual(0, rc)
        rc = tm.startTransfer("/dev/zero", "/dev/null")
        self.assertEqual(0, rc)
        rc = tm.monitorTransfer(1)
        self.assertEqual(0, rc)
        rc = tm.cleanupEndpoints()
        self.assertEqual(0, rc)

    def test_remote_mem_to_remote_mem(self):
        """Test a remote mem to remote mem transfer"""
        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        # Test using hostname
        tm = TransferManager()
        tm.setXddPath('')
        tm.setRequestSize(1024*1024)
        tm.setTransferSize(1024*1024*1024*20)
        tm.setSourceTarget("/dev/zero")
        tm.setSinkTarget("/dev/null")
        tm.addSource(None, host, host, 4, [host])
        tm.addSink(None, host, host, 4, [host])
        rc = tm.createEndpoints()
        self.assertEqual(0, rc)
        rc = tm.startTransfer("/dev/zero", "/dev/null")
        self.assertEqual(0, rc)
        rc = tm.monitorTransfer(1)
        self.assertEqual(0, rc)
        rc = tm.cleanupEndpoints()
        self.assertEqual(0, rc)

# Test startFlows method of TransferManager
class TransferManagerStartFlowsTestCase(unittest.TestCase):
    """Test startFlows method of TransferManager"""

    def test_single_file(self):
        tm = TransferManager()
        tm.setXddPath('bin')
        tm.setRequestSize(1024*1024)
        tm.setTransferSize(1024*1024*1024*20)
        tm.setSourceTarget("/dev/zero")
        tm.setSinkTarget("/dev/null")
        tm.addSource(None, "localhost", "localhost", 5)
        tm.addSink(None, "localhost", "localhost", 5)
        rc = tm.createEndpoints()
        self.assertEqual(0, rc)
        rc = tm.startTransfer("/dev/zero", "/dev/null")
        self.assertEqual(0, rc)
        rc = tm.monitorTransfer(1)
        self.assertEqual(0, rc)
        rc = tm.cleanupEndpoints()
        self.assertEqual(0, rc)
        pass

    def test_single_file_with_restart(self):
        tm = TransferManager()
        tm.setXddPath('bin')
        tm.setRequestSize(1024*1024)
        tm.setTransferSize(1024*1024*1024*20)
        tm.setSourceTarget("/dev/zero")
        tm.setSinkTarget("/dev/null")
        tm.addSource(None, "localhost", "localhost", 6)
        tm.addSink(None, "localhost", "localhost", 6)
        rc = tm.createEndpoints()
        self.assertEqual(0, rc)
        rc = tm.startTransfer("/dev/zero", "/dev/null")
        self.assertEqual(0, rc)
        rc = tm.monitorTransfer(1)
        self.assertEqual(0, rc)
        rc = tm.cleanupEndpoints()
        self.assertEqual(0, rc)
        pass

    def test_directory(self):
        pass

if __name__ == '__main__':
    unittest.main()

