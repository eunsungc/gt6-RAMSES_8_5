#!/bin/env python

# Import modules
import unittest
from xdd.partition import InvalidPartitionError
from xdd.partition import PartitionStrategy
from xdd.partition import SimplePartitionStrategy
from xdd.partition import AlignedPartitionStrategy

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test constructor method of Partition
class PartitionStrategyTestCase(unittest.TestCase):
    """Test PartitionStrategy constructor"""

    def test(self):
        """Test basic construction"""
        pass

class SimplePartitionStrategyTestCase(unittest.TestCase):
    """Test SimplePartitionStrategy constructor"""

    def test_invalid(self):
        """Test invalid contrstructor"""
        self.assertRaises(InvalidPartitionError, SimplePartitionStrategy, 4, 3)

# Test getPart method of SimplePartitionStrategy
class SimplePartitionStrategyGetPartTestCase(unittest.TestCase):
    """Test SimplePartitionStrategy getPart method"""

    def testGetPart_perfect(self):
        """Test basic partitioning"""
        ps = SimplePartitionStrategy(8, 800)
        self.assertEqual( (0, 100), ps.getPart(0) )
        self.assertEqual( (100, 100), ps.getPart(1) )
        self.assertEqual( (200, 100), ps.getPart(2) )
        self.assertEqual( (300, 100), ps.getPart(3) )
        self.assertEqual( (400, 100), ps.getPart(4) )
        self.assertEqual( (500, 100), ps.getPart(5) )
        self.assertEqual( (600, 100), ps.getPart(6) )
        self.assertEqual( (700, 100), ps.getPart(7) )

    def testGetPart_even(self):
        """Test basic partitioning"""
        ps = SimplePartitionStrategy(3, 6144)
        self.assertEqual( (0, 2048), ps.getPart(0) )
        self.assertEqual( (2048, 2048), ps.getPart(1) )
        self.assertEqual( (4096, 2048), ps.getPart(2) )

    def testGetPart_uneven(self):
        """Test basic partitioning"""
        ps = SimplePartitionStrategy(3, 7000)
        self.assertEqual( (0, 2333), ps.getPart(0) )
        self.assertEqual( (2333, 2333), ps.getPart(1) )
        self.assertEqual( (4666, 2334), ps.getPart(2) )

    def testGetPart_impossible(self):
        """Test basic partitioning"""
        ps = SimplePartitionStrategy(4, 3000)
        self.assertEqual( (0, 750), ps.getPart(0) )
        self.assertEqual( (750, 750), ps.getPart(1) )
        self.assertEqual( (1500, 750), ps.getPart(2) )
        self.assertEqual( (2250, 750), ps.getPart(3) )

# Test getPart method of AlignedPartitionStrategy
class AlignedPartitionStrategyTestCase(unittest.TestCase):
    """Test AlignedPartitionStrategy getPart method"""

    def test(self):
        """Test constructor"""
        

# Test getPart method of AlignedPartitionStrategy
class AlignedPartitionStrategyGetPartTestCase(unittest.TestCase):
    """Test AlignedPartitionStrategy getPart method"""

    def testGetPart_empty(self):
        """Test empty partitioning"""
        ps = AlignedPartitionStrategy(1, 32768*1024, 0)
        self.assertEqual( (0, 0), ps.getPart(0) )

    def testGetPart_kilo(self):
        """Test kilobyte partitioning"""
        ps = AlignedPartitionStrategy(1, 32768*1024, 1000)
        self.assertEqual( (0, 1000), ps.getPart(0) )

    def testGetPart_mega(self):
        """Test megabyte partitioning"""
        ps = AlignedPartitionStrategy(1, 32768*1024, 1000000)
        self.assertEqual( (0, 1000000), ps.getPart(0) )

    def testGetPart_perfect(self):
        """Test perfect partitioning"""
        ps = AlignedPartitionStrategy(8, 100, 800)
        self.assertEqual( (0, 100), ps.getPart(0) )
        self.assertEqual( (100, 100), ps.getPart(1) )
        self.assertEqual( (200, 100), ps.getPart(2) )
        self.assertEqual( (300, 100), ps.getPart(3) )
        self.assertEqual( (400, 100), ps.getPart(4) )
        self.assertEqual( (500, 100), ps.getPart(5) )
        self.assertEqual( (600, 100), ps.getPart(6) )
        self.assertEqual( (700, 100), ps.getPart(7) )

    def testGetPart_even(self):
        """Test evenly divided partitioning"""
        ps = AlignedPartitionStrategy(3, 1024, 6144)
        self.assertEqual( (0, 2048), ps.getPart(0) )
        self.assertEqual( (2048, 2048), ps.getPart(1) )
        self.assertEqual( (4096, 2048), ps.getPart(2) )

    def testGetPart_uneven(self):
        """Test unevenly divided partitioning"""
        ps = AlignedPartitionStrategy(3, 1024, 7000)
        self.assertEqual( (0, 2048), ps.getPart(0) )
        self.assertEqual( (2048, 2048), ps.getPart(1) )
        self.assertEqual( (4096, 2904), ps.getPart(2) )

    def testGetPart_impossible(self):
        """Test an impossible partitioning"""
        ps = AlignedPartitionStrategy(4, 1000, 3000)
        self.assertEqual( (0, 1000), ps.getPart(0) )
        self.assertEqual( (1000, 1000), ps.getPart(1) )
        self.assertEqual( (2000, 1000), ps.getPart(2) )
        self.assertEqual( (0, 0), ps.getPart(3) )

if __name__ == '__main__':
    unittest.main()
