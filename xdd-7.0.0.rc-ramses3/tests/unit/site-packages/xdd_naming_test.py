#!/bin/env python

# Import modules
import unittest
from xdd.naming import PosixNamingStrategy

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test constructor method of PosixNaming
class PosixNamingStrategyTestCase(unittest.TestCase):
    """Test PosixNamingStrategy constructor"""

    def test(self):
        """Test basic construction"""
        n = PosixNamingStrategy()
        self.assertNotEqual(n, None)

# Test buildDirsFilesLinks method of PosixNaming
class PosixNamingStrategyBuildDirsFileLinksTestCase(unittest.TestCase):
    """Test PosixNamingStrategy constructor"""

    def testAbsolutePathFileCopy(self):
        """Test copying to /dev/zero to /dev/null"""
        n = PosixNamingStrategy()
        (rc, dirs, files, links) = n.buildDirsFilesLinks('/dev/zero',
                                                         '/dev/null', 
                                                         targetExists=True, 
                                                         targetIsDir=False)
        self.assertEqual(rc, 0)
        self.assertEqual(dirs, [])
        self.assertEqual(files, [('/dev/zero', '/dev/null')])
        self.assertEqual(links, []) 

    def testCurrentDirFileCopy(self):
        """Test copying a file to '.'"""
        n = PosixNamingStrategy()
        (rc, dirs, files, links) = n.buildDirsFilesLinks('Makefile',
                                                         '.', 
                                                         targetExists=True, 
                                                         targetIsDir=True)
        self.assertEqual(rc, 0)
        self.assertEqual(dirs, [])
        self.assertEqual(files, [('Makefile', './Makefile')])
        self.assertEqual(links, []) 

    def testRelativeDirFileCopy(self):
        """Test copying a file to '..'"""
        n = PosixNamingStrategy()
        (rc, dirs, files, links) = n.buildDirsFilesLinks('Makefile',
                                                         '..', 
                                                         targetExists=True, 
                                                         targetIsDir=True)
        self.assertEqual(rc, 0)
        self.assertEqual(dirs, [])
        self.assertEqual(files, [('Makefile', '../Makefile')])
        self.assertEqual(links, []) 


if __name__ == '__main__':
    unittest.main()
