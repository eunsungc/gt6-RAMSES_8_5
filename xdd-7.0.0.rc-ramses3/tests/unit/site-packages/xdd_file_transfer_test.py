#!/bin/env python

# Import modules
import unittest
import xdd_file_transfer

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test parseSpec method of TransferManager
class ParseSpecTestCase(unittest.TestCase):
    """Test parseSpec function"""

    def test_empty(self):
        """Test parseSpec with an empty string"""
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, '')

    def test_invalid(self):
        """Test a bunch of invalid strings"""
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, ':')
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, 'file:')
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, ':file')
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, 'h,:file')
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, ',h:file')
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, '@,:file')
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, '@h:file')
        self.assertRaises(xdd_file_transfer.InvalidSpecError, 
                          xdd_file_transfer.parseSpec, 'user@:file')

    def test_no_host(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('file')
        self.assertEqual('file', fname)
        self.assertEqual(0, len(pairs))

    def test_single_host(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('host:file')
        self.assertEqual('file', fname)
        self.assertEqual(1, len(pairs))
        self.assertEqual((None, 'host'), pairs[0])

    def test_single_user_host(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('user@host:file')
        self.assertEqual('file', fname)
        self.assertEqual(1, len(pairs))
        self.assertEqual(('user', 'host'), pairs[0])

    def test_multi_host(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('host1,host2:file')
        self.assertEqual('file', fname)
        self.assertEqual(2, len(pairs))
        self.assertEqual((None, 'host1'), pairs[0])
        self.assertEqual((None, 'host2'), pairs[1])

    def test_multi_user_host(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('user1@host1,user2@host2:file')
        self.assertEqual('file', fname)
        self.assertEqual(2, len(pairs))
        self.assertEqual(('user1', 'host1'), pairs[0])
        self.assertEqual(('user2', 'host2'), pairs[1])

    def test_multi_user_host2(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('host1,user2@host2:file')
        self.assertEqual('file', fname)
        self.assertEqual(2, len(pairs))
        self.assertEqual((None, 'host1'), pairs[0])
        self.assertEqual(('user2', 'host2'), pairs[1])

    def test_multi_user_host3(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('user1@host1,host2:file')
        self.assertEqual('file', fname)
        self.assertEqual(2, len(pairs))
        self.assertEqual(('user1', 'host1'), pairs[0])
        self.assertEqual((None, 'host2'), pairs[1])

    def test_dev_zero(self):
        (pairs, fname) = xdd_file_transfer.parseSpec('/dev/zero')
        self.assertEqual('/dev/zero', fname)
        self.assertEqual([], pairs)

if __name__ == '__main__':
    unittest.main()

