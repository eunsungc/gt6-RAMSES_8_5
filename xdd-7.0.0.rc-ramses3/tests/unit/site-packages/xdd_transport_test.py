#!/bin/env python

# Import modules
import unittest
import Pyro4
from xdd.transport import FlowBuilderTransport
from xdd.transport import FlowBuilderTransportError

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test constructor method of FlowBuilderTransport
class FlowBuilderTransportTestCase(unittest.TestCase):
    """Test FlowBuilderTransport constructor"""

    def test_valid_host(self):
        """Test construction with a legal hostname"""

        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        try:
            f = FlowBuilderTransport(host, host)
            self.assertEqual(True, True)
        except:
            self.assertEqual(False, True)
            

    def test_invalid_host(self):
        """Test construction with an invalid hostname"""
        try:
            f = FlowBuilderTransport('invalid-hostip-string', 'invalid-hostname-string')
            self.assertEqual(True, False)
        except FlowBuilderTransportError:
            self.assertEqual(True, True)
        except:
            self.assertEqual(True, False)
            
    def test_single_transport(self):
        """Create a single server on a host"""

        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        fbt1 = FlowBuilderTransport(host, host)
        fbt1.shutdown()
        fbt2 = FlowBuilderTransport(host, host)
        fbt2.shutdown()

    def test_multiple_transport(self):
        """Create multiple servers on the same host"""

        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        fbt1 = FlowBuilderTransport(host, host)
        fbt2 = FlowBuilderTransport(host, host)
        fbt2.shutdown()
        fbt1.shutdown()

    def test_multiple_transport_detailed(self):
        """Create multiple servers on the same host"""

        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        fbt1 = FlowBuilderTransport(host, host)
        fbt2 = FlowBuilderTransport(host, host)

        # Now test that a message can cross the transports
        host1 = fbt1.getFlowBuilder().hostname()
        host2 = fbt2.getFlowBuilder().hostname()
        self.assertEqual(host1, host2)

        # Shutdown cleanly
        fbt2.shutdown()
        fbt1.shutdown()

# Test getFlowBuilder method of FlowBuilderTransport
class FlowBuilderTransportGetFlowBuilderTestCase(unittest.TestCase):
    """Test getFlowBuilder method of FlowBuilderTransport"""

    def test_single_flowbuilder(self):
        """Create a single server on a host"""

        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        fbt = FlowBuilderTransport(host, host)
        fb = fbt.getFlowBuilder()
        self.assertEqual(True, fb.isReady())
        self.assertRaises(Pyro4.errors.ConnectionClosedError, fb.shutdown)

    def test_multiple_flowbuilder(self):
        """Create multiple servers on the same host"""

        # Get the hostname
        import platform
        host = platform.node()
        self.assertNotEqual(0, len(host))

        fbt1 = FlowBuilderTransport(host, host)
        fb1 = fbt1.getFlowBuilder()
        fbt2 = FlowBuilderTransport(host, host)
        fb2 = fbt2.getFlowBuilder()
        self.assertEqual(True, fb1.isReady())
        self.assertEqual(True, fb2.isReady())
        self.assertRaises(Pyro4.errors.ConnectionClosedError, fb1.shutdown)
        self.assertRaises(Pyro4.errors.ConnectionClosedError, fb2.shutdown)

if __name__ == '__main__':
    unittest.main()
