#include "globus_ftp_client.h"
#include "globus_ftp_client_restart_marker_plugin.h"

#define BUFLEN 8192

typedef struct
{
    globus_mutex_t                          mutex;
    globus_cond_t                           cond;
    globus_bool_t                           done;
} monitor_t;

static
void
client_write_data_cb(
    void *                                  user_arg,
    globus_ftp_client_handle_t *            handle,
    globus_object_t *                       error,
    globus_byte_t *                         buffer,
    globus_size_t                           length,
    globus_off_t                            offset,
    globus_bool_t                           eof);

static
void
client_complete_cb(
    void *                                  user_arg,
    globus_ftp_client_handle_t *            handle,
    globus_object_t *                       error);

/*
 *
 * Restart marker plugin specific callbacks
 *
 */

typedef struct
{
    int                                     storage_fd;
    globus_bool_t                           marker_written;
} marker_state_t;

static
globus_bool_t
restart_marker_begin_cb(
    void *                                  user_arg,
    globus_ftp_client_handle_t *            handle,
    const char *                            source_url,
    const char *                            dest_url,
    globus_ftp_client_restart_marker_t *    user_saved_marker)
{
    marker_state_t *                        marker_state;

    marker_state = (marker_state_t *) user_arg;

    printf("restart_marker_begin_cb\n");

    return GLOBUS_FALSE;
}

static
void
restart_marker_marker_cb(
    void *                                  user_arg,
    globus_ftp_client_handle_t *            handle,
    globus_ftp_client_restart_marker_t *    marker)
{
    marker_state_t *                        marker_state;
    char *                                  marker_str;

    marker_state = (marker_state_t *) user_arg;


    globus_ftp_client_restart_marker_to_string(marker, &marker_str);
    printf("Received marker:'%s'\n", marker_str);
    globus_free(marker_str);
}

static
void
restart_marker_complete_cb(
    void *                                  user_arg,
    globus_ftp_client_handle_t *            handle,
    globus_object_t *                       error,
    const char *                            error_url)
{
    marker_state_t *                        marker_state;

    marker_state = (marker_state_t *) user_arg;

    printf("restart_marker_complete_cb\n");
}


int
main(int argc, char **argv)
{
    globus_ftp_client_plugin_t              restart_marker_plugin;
    globus_ftp_client_handleattr_t          handleattr;
    globus_ftp_client_handle_t              handle;
    globus_ftp_client_operationattr_t       attr;
    globus_result_t                         result;
    globus_byte_t                           buffer[BUFLEN];
    globus_size_t                           nbytes;
    globus_size_t                           num_read;
    monitor_t                               monitor;
    marker_state_t                          marker_state;

    if(argc < 2)
    {
        globus_libc_fprintf(stderr, "Please specify an url\n");
        exit(1);
    }

    globus_module_activate(GLOBUS_FTP_CLIENT_MODULE);
    globus_module_activate(GLOBUS_FTP_CLIENT_RESTART_MARKER_PLUGIN_MODULE);

    /* init plugin with callbacks deifned above */
    globus_ftp_client_restart_marker_plugin_init(
        &restart_marker_plugin,
        restart_marker_begin_cb,
        restart_marker_marker_cb,
        restart_marker_complete_cb,
        &marker_state);

    /* Set up our handle to use the new plugin */
    globus_ftp_client_handleattr_init(&handleattr);
    globus_ftp_client_handleattr_add_plugin(&handleattr, &restart_marker_plugin);
    globus_ftp_client_handle_init(&handle, &handleattr);
    globus_ftp_client_operationattr_init(&attr);
    globus_ftp_client_operationattr_set_mode(&attr,
        GLOBUS_FTP_CONTROL_MODE_EXTENDED_BLOCK);

    globus_mutex_init(&monitor.mutex, GLOBUS_NULL);
    globus_cond_init(&monitor.cond, GLOBUS_NULL);
    monitor.done = GLOBUS_FALSE;

    /* now, all transfers will use restart marker plugin */
    result = globus_ftp_client_put(&handle,
        argv[1],
        &attr,
        GLOBUS_NULL,
        client_complete_cb,
        &monitor);

    if(result == GLOBUS_SUCCESS)
    {
        nbytes = 0;
        while((num_read = read(STDIN_FILENO, buffer + nbytes, BUFLEN - nbytes)) > 0 &&
            (nbytes += num_read) < BUFLEN);

        if(num_read < 0)
        {
            globus_libc_fprintf(stderr, "Error reading from stdin\n");
        }

        result = globus_ftp_client_register_write(&handle,
            buffer,
            nbytes,
            0,
            (nbytes == BUFLEN) ? GLOBUS_FALSE : GLOBUS_TRUE,
            client_write_data_cb,
            GLOBUS_NULL);

        if(result != GLOBUS_SUCCESS)
        {
            globus_libc_fprintf(stderr, "%s",
                globus_object_printable_to_string(globus_error_get(result)));

            globus_ftp_client_abort(&handle);
        }

        globus_mutex_lock(&monitor.mutex);
        while(!monitor.done)
        {
            globus_cond_wait(&monitor.cond, &monitor.mutex);
        }
        globus_mutex_unlock(&monitor.mutex);

    }
    else
    {
        globus_libc_fprintf(stderr, "%s", globus_object_printable_to_string(
            globus_error_get(result)));
    }

    globus_cond_destroy(&monitor.cond);
    globus_mutex_destroy(&monitor.mutex);
    globus_ftp_client_operationattr_destroy(&attr);
    globus_ftp_client_handle_destroy(&handle);
    globus_ftp_client_handleattr_destroy(&handleattr);
    globus_ftp_client_restart_marker_plugin_destroy(&restart_marker_plugin);

    globus_module_deactivate(GLOBUS_FTP_CLIENT_RESTART_MARKER_PLUGIN_MODULE);
    globus_module_deactivate(GLOBUS_FTP_CLIENT_MODULE);

    return 0;
}

/*
 *
 * FTP client specific callbacks
 *
 */

static
void
client_write_data_cb(
    void *                                  user_arg,
    globus_ftp_client_handle_t *            handle,
    globus_object_t *                       error,
    globus_byte_t *                         buffer,
    globus_size_t                           length,
    globus_off_t                            offset,
    globus_bool_t                           eof)
{
    globus_result_t                         result;
    globus_size_t                           nbytes;
    globus_size_t                           num_read;

    if(error)
    {
        globus_libc_fprintf(stderr, "%s",
            globus_object_printable_to_string(error));

        globus_ftp_client_abort(handle);
    }
    else if(!eof)
    {
        nbytes = 0;
        while((num_read = read(STDIN_FILENO, buffer + nbytes, BUFLEN - nbytes)) > 0 &&
            (nbytes += num_read) < BUFLEN);

        if(num_read < 0)
        {
            globus_libc_fprintf(stderr, "Error reading from stdin\n");
        }

        result = globus_ftp_client_register_write(handle,
            buffer,
            nbytes,
            offset + length,
            (nbytes == BUFLEN) ? GLOBUS_FALSE : GLOBUS_TRUE,
            client_write_data_cb,
            GLOBUS_NULL);

        if(result != GLOBUS_SUCCESS)
        {
            globus_libc_fprintf(stderr, "%s",
                globus_object_printable_to_string(globus_error_get(result)));

            globus_ftp_client_abort(handle);
        }
    }
}

static
void
client_complete_cb(
    void *                                  user_arg,
    globus_ftp_client_handle_t *            handle,
    globus_object_t *                       error)
{
    monitor_t *                             monitor;

    if(error)
    {
        globus_libc_fprintf(stderr, "%s",
            globus_object_printable_to_string(error));
    }

    monitor = (monitor_t *) user_arg;

    globus_mutex_lock(&monitor->mutex);
    monitor->done = GLOBUS_TRUE;
    globus_cond_signal(&monitor->cond);
    globus_mutex_unlock(&monitor->mutex);
}
